// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./cms.db"
}

model user {
  id              String   @id @default(uuid())
  username        String   @unique
  email           String   @unique
  password_hash   String
  salt            String?
  fullname        String   @default("")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  last_login_time DateTime @default(now())
  last_login_ip   String   @default("")
  status          String   @default("active")
  type            String   @default("admin")

  pages    page[]
  images   image[]
  posts    post[]
  products product[]

  categories_of_post    category_of_post[]
  categories_of_product category_of_product[]
}

model page {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  title       String
  type        String   @default("page")
  slug        String
  description String   @default("")
  status      String   @default("active")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user_id String
  user    user   @relation(fields: [user_id], references: [id])

  page_sections section_of_page[]
}

model section_of_page {
  id              Int       @id @default(autoincrement())
  name            String
  value           String    @default("")
  type            String
  class           String    @default("")
  display         Boolean   @default(true)
  attr_href       String    @default("")
  attr_target     String?
  attributes      String?   
  updated_at      DateTime  @updatedAt
  expiration_date DateTime?

  page_id Int
  page    page @relation(fields: [page_id], references: [id])
}

model image {
  id         Int      @id @default(autoincrement())
  title      String
  file_name  String
  url        String
  size       Int
  resolution String   @default("")
  created_at DateTime @default(now())
  type       String

  user_id String
  user    user   @relation(fields: [user_id], references: [id])

  image_of_product    image_of_product? @relation(fields: [image_of_product_id], references: [id])
  image_of_product_id Int?

  posts post[]
}

model post {
  id         Int      @id @default(autoincrement())
  title      String
  slug       String
  excerpt    String   @default("")
  content    String   @default("")
  status     String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id  String
  user     user                  @relation(fields: [user_id], references: [id])
  category categories_on_posts[]

  image    image? @relation(fields: [image_id], references: [id])
  image_id Int?

 
}

model category_of_post {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  description String   @default("")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user_id String
  user    user                  @relation(fields: [user_id], references: [id])
  posts   categories_on_posts[]
}

model categories_on_posts {
  post_id Int
  post    post @relation(fields: [post_id], references: [id])

  post_category_id Int
  post_category    category_of_post @relation(fields: [post_category_id], references: [id])

  @@id([post_id, post_category_id])
}

model product {
  id             String   @id @default(uuid())
  name           String
  slug           String
  description    String   @default("")
  detail         String   @default("")
  price          Int      @default(0)
  is_show_price  Boolean  @default(true)
  stock_status   String   @default("on-stock")
  stock_quantity Int      @default(0)
  order          Int      @default(0)
  status         String   @default("active")
  unit           String
  is_sale_off    Boolean  @default(false)
  sale_off_desc  String   @default("")
  label          String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user_id String
  user    user   @relation(fields: [user_id], references: [id])

  product_images image_of_product[]
  categories     categories_on_products[]
}

model category_of_product {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  description String   @default("")
  user_id     String
  user        user     @relation(fields: [user_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  parent_id Int?                  @unique
  parent    category_of_product?  @relation("parent_category", fields: [parent_id], references: [id])
  parents   category_of_product[] @relation("parent_category")

  products categories_on_products[]
}

model categories_on_products {
  product_id String
  product    product @relation(fields: [product_id], references: [id])

  product_category_id Int
  product_category    category_of_product @relation(fields: [product_category_id], references: [id])

  @@id([product_id, product_category_id])
}

model image_of_product {
  id    Int @id @default(autoincrement())
  order Int

  product_id String
  product    product @relation(fields: [product_id], references: [id])

  images image[]
}
